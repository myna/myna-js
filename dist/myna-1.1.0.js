/*! myna - v1.1.0 - 2012-07-25
* http://mynaweb.com/
* Copyright (c) 2012 Noel Welsh; Licensed BSD 2-Clause */

// Generated by CoffeeScript 1.3.3

/*
 Myna Javascript Client
 Copyright Untyped 2012
*/


(function() {
  var Config, Cookie, Experiment, JsonP, Log, LogLevel, Myna, Suggestion, extend, f, _i, _len, _ref,
    __slice = [].slice;

  Myna = {
    onload: [],
    onsuggest: [],
    onreward: []
  };

  window.Myna = window.Myna != null ? window.Myna : Myna;

  LogLevel = {
    SILENT: 0,
    ERROR: 1,
    WARN: 2,
    INFO: 3,
    DEBUG: 4
  };

  Log = (function() {

    function Log(loglevel) {
      this.loglevel = loglevel;
    }

    Log.prototype.log = function(level, message) {
      if (window.console && this.loglevel >= level) {
        return window.console.log(message);
      }
    };

    return Log;

  })();

  extend = function(dest, src) {
    var key, value;
    for (key in src) {
      value = src[key];
      if (!dest[key]) {
        dest[key] = value;
      }
    }
    return dest;
  };

  Config = (function() {

    function Config(uuid) {
      var protocol;
      protocol = 'https:' === document.location.protocol ? 'https' : 'http';
      this.cookieLifespan = 365;
      this.cookieName = "myna" + uuid;
      this.timeout = 400;
      this.baseurl = "" + protocol + "://api.mynaweb.com";
      this.loglevel = LogLevel.ERROR;
      this.rewardSuccess = function(ok) {
        return void 0;
      };
      this.error = function(problem) {
        return void 0;
      };
    }

    Config.prototype.extend = function(options) {
      return extend(extend({}, options), this);
    };

    return Config;

  })();

  Cookie = {
    create: function(name, value, days) {
      var date, expires;
      expires = days ? (date = new Date(), date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)), "; expires=" + date.toGMTString()) : "";
      return document.cookie = "" + name + "=" + (value + expires) + "; path=/";
    },
    read: function(name) {
      var cookie, cookieValue, cookies, found, isNameEQCookie, nameEQ, _i, _len;
      nameEQ = name + "=";
      isNameEQCookie = function(cookie) {
        var i;
        i = cookie.indexOf(nameEQ);
        return i >= 0 && cookie.substring(0, i).match('^\\s*$');
      };
      cookieValue = function(cookie) {
        var i;
        i = cookie.indexOf(nameEQ);
        return cookie.substring(i + nameEQ.length, cookie.length);
      };
      cookies = document.cookie.split(';');
      for (_i = 0, _len = cookies.length; _i < _len; _i++) {
        cookie = cookies[_i];
        if (isNameEQCookie(cookie)) {
          found = cookieValue(cookie);
        }
      }
      return found;
    },
    erase: function(name) {
      return Cookie.create(name, "", -1);
    }
  };

  window.Myna.callbacks = [];

  JsonP = {
    callbackCounter: 0,
    removeCallback: function(callbackName) {
      if (this.readyState && this.readyState !== "complete" && this.readyState !== "loaded") {

      } else {
        this.onload = null;
        try {
          return this.parentNode.removeChild(this);
        } catch (e) {

        } finally {
          window.Myna.callbacks[callbackName] = null;
        }
      }
    },
    doJsonP: function(options) {
      var callbackName, elem, key, returned, url, value, _ref;
      returned = false;
      callbackName = "callback" + (JsonP.callbackCounter++);
      window.Myna.callbacks[callbackName] = function(args) {
        if (!returned) {
          returned = true;
          return options.success.apply(this, arguments);
        }
      };
      url = options.url + "?";
      _ref = options.data;
      for (key in _ref) {
        value = _ref[key];
        url += "" + key + "=" + value + "&";
      }
      url += "callback=window.Myna.callbacks." + callbackName;
      if (options.timeout > 0) {
        window.setTimeout(function() {
          if (!returned) {
            returned = true;
            JsonP.removeCallback.call(elem, callbackName);
            return options.error({
              typename: 'problem',
              subtype: 500,
              messages: [
                {
                  typename: "timeout",
                  item: "The server took longer than " + options.timeout + " ms to reply"
                }
              ]
            });
          }
        }, options.timeout);
      }
      elem = document.createElement("script");
      elem.setAttribute("type", "text/javascript");
      elem.setAttribute("async", "true");
      elem.onload = elem.onreadystatechange = function() {
        return JsonP.removeCallback.call(elem, callbackName);
      };
      elem.setAttribute("src", url);
      return document.getElementsByTagName("head")[0].appendChild(elem);
    }
  };

  Experiment = (function() {

    function Experiment(uuid, options) {
      this.uuid = uuid;
      if (options == null) {
        options = {};
      }
      this.config = new Config(this.uuid).extend(options);
      this.logger = new Log(this.config.loglevel);
    }

    Experiment.prototype.suggest = function(success, error) {
      var doOnSuggest, errorWrapper, options, successWrapper,
        _this = this;
      if (error == null) {
        error = this.config.error;
      }
      doOnSuggest = function(data) {
        var f, _i, _len, _ref, _results;
        _ref = Myna.onsuggest;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          _results.push(f(data));
        }
        return _results;
      };
      successWrapper = function(data) {
        var suggestion;
        _this.logger.log(LogLevel.DEBUG, "Experiment.suggest successWrapper called");
        _this.logger.log(LogLevel.DEBUG, data);
        if (data.typename === "suggestion") {
          _this.logger.log(LogLevel.INFO, "Myna suggested " + data.choice);
          _this.logger.log(LogLevel.DEBUG, "Response token is " + data.token);
          suggestion = new Suggestion(_this, data.choice, data.token);
          doOnSuggest(suggestion);
          if (success) {
            return success(suggestion);
          } else {
            return _this.logger.log(LogLevel.WARN, "You should pass a success function to Experiment.suggest. See the docs for details.");
          }
        } else if (data.typename === "problem") {
          _this.logger.log(LogLevel.ERROR, "Experiment.suggest returned an API error: " + data.subtype + " " + data.messages);
          return errorWrapper(data);
        } else {
          _this.logger.log(LogLevel.ERROR, "Experiment.suggest did something unexpected");
          _this.logger.log(LogLevel.ERROR, data);
          return errorWrapper({
            typename: 'problem',
            subtype: 400,
            messages: [
              {
                typename: "unexpected",
                item: data
              }
            ]
          });
        }
      };
      errorWrapper = function(data) {
        _this.logger.log(LogLevel.ERROR, "Experiment.suggest errorWrapper called");
        _this.logger.log(LogLevel.ERROR, data);
        doOnSuggest(data);
        if (error) {
          return error(data);
        }
      };
      options = {
        url: this.config.baseurl + ("/v1/experiment/" + this.uuid + "/suggest"),
        data: {},
        success: successWrapper,
        error: errorWrapper
      };
      return JsonP.doJsonP(extend(options, this.config));
    };

    Experiment.prototype.recall = function() {
      var choice, cookie, i, token;
      cookie = Cookie.read(this.config.cookieName);
      if (cookie) {
        i = cookie.indexOf(':');
        if (i >= 0) {
          token = cookie.substring(0, i);
          choice = cookie.substring(i + 1, cookie.length);
          return new Suggestion(this, choice, token);
        } else {
          return void 0;
        }
      } else {
        return void 0;
      }
    };

    Experiment.prototype.forget = function() {
      return Cookie.erase(this.config.cookieName);
    };

    return Experiment;

  })();

  window.Myna.Experiment = Experiment;

  Suggestion = (function() {

    function Suggestion(experiment, choice, token) {
      this.experiment = experiment;
      this.choice = choice;
      this.token = token;
    }

    Suggestion.prototype.reward = function(amount, success, error) {
      var data, errorWrapper, options,
        _this = this;
      if (amount == null) {
        amount = 1.0;
      }
      if (success == null) {
        success = this.experiment.config.rewardSuccess;
      }
      if (error == null) {
        error = this.experiment.config.error;
      }
      data = {
        token: this.token,
        amount: amount
      };
      errorWrapper = function(data) {
        _this.experiment.logger.log(LogLevel.ERROR, "Suggestion.reward errorWrapper called");
        _this.experiment.logger.log(LogLevel.ERROR, data);
        if (error) {
          return error(data);
        }
      };
      options = {
        url: this.experiment.config.baseurl + ("/v1/experiment/" + this.experiment.uuid + "/reward"),
        data: data,
        success: success,
        error: errorWrapper
      };
      return JsonP.doJsonP(extend(options, this.experiment.config));
    };

    Suggestion.prototype.remember = function() {
      return Cookie.create(this.experiment.config.cookieName, "" + this.token + ":" + this.choice, this.experiment.config.cookieLifespan);
    };

    Suggestion.prototype.rewardOnClick = function(elt, location, amount) {
      var handler, redirect,
        _this = this;
      if (amount == null) {
        amount = 1.0;
      }
      redirect = function() {
        return window.location = location;
      };
      handler = function(evt) {
        if (!evt) {
          evt = window.event;
        }
        if (evt.stopPropagation) {
          evt.stopPropagation();
        }
        if (evt.returnValue) {
          evt.returnValue = false;
        }
        _this.reward(amount, redirect, redirect);
        return false;
      };
      return elt.onclick = handler;
    };

    return Suggestion;

  })();

  window.Myna.onload.push = function() {
    var elts, f, _i, _len, _results;
    elts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = elts.length; _i < _len; _i++) {
      f = elts[_i];
      _results.push(f());
    }
    return _results;
  };

  _ref = window.Myna.onload;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    f = _ref[_i];
    f();
  }

}).call(this);
