/*! myna-js - v0.1 - 2012-06-15
* http://mynaweb.com/
* Copyright (c) 2012 Noel Welsh; Licensed BSD 2-Clause */

// Generated by CoffeeScript 1.3.3

/*
 Myna Javascript Client
 Copyright Untyped 2012
*/


(function() {
  var JsonP, Log, LogLevel, Myna, extend;

  LogLevel = {
    SILENT: 0,
    ERROR: 1,
    WARN: 2,
    INFO: 3,
    DEBUG: 4
  };

  Log = (function() {

    function Log(loglevel) {
      this.loglevel = loglevel;
    }

    Log.prototype.log = function(level, message) {
      if (window.console && this.loglevel >= level) {
        return window.console.log(message);
      }
    };

    return Log;

  })();

  extend = function(dest, src) {
    var key, value;
    for (key in src) {
      value = src[key];
      if (!dest[key]) {
        dest[key] = value;
      }
    }
    return dest;
  };

  window.myna = {
    callbacks: []
  };

  JsonP = {
    callbackCounter: 0,
    removeCallback: function(callbackName) {
      if (this.readyState && this.readyState !== "complete" && this.readyState !== "loaded") {

      } else {
        this.onload = null;
        try {
          return this.parentNode.removeChild(this);
        } catch (e) {

        } finally {
          window.myna.callbacks[callbackName] = null;
        }
      }
    },
    doJsonP: function(options) {
      var callbackName, elem, key, returned, url, value, _ref;
      returned = false;
      callbackName = "callback" + (JsonP.callbackCounter++);
      window.myna.callbacks[callbackName] = function(args) {
        if (!returned) {
          returned = true;
          return options.success.apply(this, arguments);
        }
      };
      url = options.url + "?";
      _ref = options.data;
      for (key in _ref) {
        value = _ref[key];
        url += "" + key + "=" + value + "&";
      }
      url += "callback=window.myna.callbacks." + callbackName;
      if (options.timeout > 0) {
        window.setTimeout(function() {
          if (!returned) {
            returned = true;
            JsonP.removeCallback.call(elem, callbackName);
            return options.error({
              typename: 'problem',
              subtype: 500,
              messages: [
                {
                  typename: "timeout",
                  item: "The server took longer than " + options.timeout + " ms to reply"
                }
              ]
            });
          }
        }, options.timeout);
      }
      elem = document.createElement("script");
      elem.setAttribute("type", "text/javascript");
      elem.setAttribute("async", "true");
      elem.onload = elem.onreadystatechange = function() {
        return JsonP.removeCallback.call(elem, callbackName);
      };
      elem.setAttribute("src", url);
      return document.getElementsByTagName("head")[0].appendChild(elem);
    }
  };

  Myna = (function() {

    Myna.prototype.token = null;

    function Myna(experiment, options) {
      var defaults;
      this.experiment = experiment;
      this.options = options != null ? options : {};
      defaults = {
        cookieLifespan: 365,
        cookieName: "myna" + this.experiment,
        timeout: 1000,
        baseurl: "http://api.mynaweb.com",
        loglevel: 1
      };
      this.options = extend(extend({}, defaults), options);
      this.logger = new Log(this.options.loglevel);
    }

    Myna.prototype.parseSuggestResponse = function(content) {
      return {
        token: content.token,
        choice: content.choice
      };
    };

    Myna.prototype.parseErrorResponse = function(content) {
      return {
        code: content.subtype,
        messages: content.messages
      };
    };

    Myna.prototype.doAjax = function(path, data, success, error) {
      var ajaxOptions;
      this.logger.log(LogLevel.DEBUG, "myna.doAjax called");
      ajaxOptions = extend(extend({}, this.options), {
        url: this.options.baseurl + path,
        data: data,
        success: success,
        error: error
      });
      this.logger.log(LogLevel.DEBUG, ajaxOptions);
      return JsonP.doJsonP(ajaxOptions);
    };

    Myna.prototype.suggest = function(success, error) {
      var data, errorWrapper, successWrapper,
        _this = this;
      this.logger.log(LogLevel.DEBUG, "myna.suggest called");
      data = {};
      successWrapper = function(data, msg, xhr) {
        var response;
        _this.logger.log(LogLevel.DEBUG, "myna.suggest successWrapper called");
        _this.logger.log(LogLevel.DEBUG, data);
        if (data.typename === "suggestion") {
          response = _this.parseSuggestResponse(data);
          _this.logger.log(LogLevel.INFO, "Myna suggested " + response.suggestion);
          _this.logger.log(LogLevel.DEBUG, "Response token stored " + response.token);
          myna.token = response.token;
          if (success) {
            return success(response);
          } else {
            return _this.logger.log(LogLevel.WARN, "You should pass a success function to myna.suggest. See the docs for details.");
          }
        } else if (data.typename === "problem") {
          _this.logger.log(LogLevel.ERROR, "Myna.suggest returned an API error: " + data.subtype + " " + data.messages);
          if (error) {
            return error(parseErrorResponse(data));
          }
        } else {
          _this.logger.log(LogLevel.ERROR, "Myna.suggest did something unexpected");
          _this.logger.log(LogLevel.ERROR, data);
          if (error) {
            return error(400, [
              {
                typename: "unexpected",
                item: data
              }
            ]);
          }
        }
      };
      errorWrapper = function(response) {
        var message;
        _this.logger.log(LogLevel.DEBUG, "myna.suggest errorWrapper called");
        message = _this.parseErrorResponse(response);
        _this.logger.log(LogLevel.ERROR, response);
        _this.logger.log(LogLevel.ERROR, "myna.suggest failed: error " + message);
        if (error) {
          return error(message);
        }
      };
      return this.doAjax("/v1/experiment/" + this.experiment + "/suggest", data, successWrapper, errorWrapper);
    };

    Myna.prototype.reward = function(amount, success, error) {
      var data, errorWrapper, successWrapper;
      this.logger.log(LogLevel.DEBUG, "myna.reward called");
      if (typeof amount === "object" && amount.target) {
        this.logger.log(LogLevel.WARN, "You used myna.reward directly as an event handler, which is strictly speaking bad.");
        this.logger.log(LogLevel.WARN, "To suppress this message, wrap the call to myna.reward in an anonymous function, e.g.:");
        this.logger.log(LogLevel.WARN, "  $(\"foo\").click(function() { myna.reward() })");
        amount = null;
        success = null;
        error = null;
      }
      if (!myna.token) {
        this.logger.log(LogLevel.ERROR, "You must call suggest before you call reward.");
        return;
      }
      data = {
        token: myna.token,
        amount: amount || 1.0
      };
      successWrapper = function(data, msg, xhr) {
        this.logger.log(LogLevel.DEBUG, "myna.reward successWrapper called");
        myna.token = null;
        this.logger.log(LogLevel.INFO, "myna.reward succeeded");
        if (success) {
          return success();
        }
      };
      errorWrapper = function(xhr, text, error) {
        var response;
        this.logger.log(LogLevel.DEBUG, "myna.reward errorWrapper called");
        response = parseErrorResponse(xhr.responseText);
        this.logger.log(LogLevel.ERROR, "myna.reward failed: error " + response.code + " " + response.message);
        if (error) {
          return error(response.code, response.message);
        }
      };
      return myna.doAjax("/v1/experiment/" + this.experiment + "/reward", data, successWrapper, errorWrapper);
    };

    Myna.prototype.saveToken = function(token) {
      this.logger.log(LogLevel.DEBUG, "myna.saveToken called with token" + token);
      token = token || myna.token;
      if (token) {
        return createCookie(myna.options.cookieName, token, myna.options.cookieLifespan);
      } else {
        return this.logger.log(LogLevel.WARN, "myna.saveToken called with empty token and myna.token also empty");
      }
    };

    Myna.prototype.loadToken = function() {
      var token;
      token = readCookie(myna.options.cookieName);
      if (!token) {
        return this.logger.log(LogLevel.WARN, "myna.loadToken loaded empty token");
      }
    };

    Myna.prototype.clearToken = function() {
      return clearCookie(myna.options.cookieName);
    };

    return Myna;

  })();

  window.Myna = Myna;

}).call(this);
